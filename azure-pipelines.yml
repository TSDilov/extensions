<<<<<<< HEAD
# Setting batch to true, triggers one build at a time.
# if there is a push while a build in progress, it will wait,
# until the running build finishes, and produce a build with all the changes
# that happened during the last build.
=======
#
# See https://docs.microsoft.com/azure/devops/pipelines/yaml-schema for details
#

variables:
  - name: _TeamName
    value: AspNetCore
  - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
    value: true
  - name: _PublishUsingPipelines
    value: true
  - name: PostBuildSign
    value: true
  - name: _DotNetArtifactsCategory
    value: ASPNETEXTENSIONS
  - ${{ if ne(variables['System.TeamProject'], 'public') }}:
    - group: DotNet-MSRC-Storage
    - name: _InternalRuntimeDownloadArgs
      value: /p:DotNetRuntimeSourceFeed=https://dotnetclimsrc.blob.core.windows.net/dotnet
             /p:DotNetRuntimeSourceFeedKey=$(dotnetclimsrc-read-sas-token-base64)
  - ${{ if eq(variables['System.TeamProject'], 'public') }}:
    - name: _InternalRuntimeDownloadArgs
      value: ''

# CI and PR triggers
>>>>>>> 8d8547bffdfbb7a658721bec13b9269774ab215b
trigger:
  batch: true
  branches:
    include:
<<<<<<< HEAD
      - main
      - release/*
      - internal/release/*
  paths:
    include:
      - '*'
    exclude:
      - eng/Version.Details.xml
      - .github/*
      - docs/*
      - CODE_OF_CONDUCT.md
      - CONTRIBUTING.md
      - README.md
      - SECURITY.md
      - LICENSE.TXT
      - PATENTS.TXT
      - THIRD-PARTY-NOTICES.TXT

pr:
  branches:
    include:
      - main
      - release/*
      - internal/release/*
  paths:
    include:
      - '*'
    exclude:
      - eng/Version.Details.xml
      - .github/*
      - docs/*
      - CODE_OF_CONDUCT.md
      - CONTRIBUTING.md
      - README.md
      - SECURITY.md
      - LICENSE.TXT
      - PATENTS.TXT
      - THIRD-PARTY-NOTICES.TXT

variables:
  - name: _TeamName
    value: dotnet-r9
  - name: NativeToolsOnMachine
    value: true
  - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
    value: true

  - name: SkipQualityGates
    value: false

  - name: runAsPublic
    value: ${{ eq(variables['System.TeamProject'], 'public') }}

  - name: _BuildConfig
    value: Release
  - name: isOfficialBuild
    value: ${{ and(ne(variables['runAsPublic'], 'true'), notin(variables['Build.Reason'], 'PullRequest')) }}
  - name: Build.Arcade.ArtifactsPath
    value: $(Build.SourcesDirectory)/artifacts/
  - name: Build.Arcade.LogsPath
    value: $(Build.Arcade.ArtifactsPath)log/$(_BuildConfig)/
  - name: Build.Arcade.TestResultsPath
    value: $(Build.Arcade.ArtifactsPath)TestResults/$(_BuildConfig)/

  - ${{ if or(startswith(variables['Build.SourceBranch'], 'refs/heads/release/'), startswith(variables['Build.SourceBranch'], 'refs/heads/internal/release/'), eq(variables['Build.Reason'], 'Manual')) }}:
    - name: PostBuildSign
      value: false
  - ${{ else }}:
    - name: PostBuildSign
      value: true

  # Produce test-signed build for PR and Public builds
  - ${{ if or(eq(variables['runAsPublic'], 'true'), eq(variables['Build.Reason'], 'PullRequest')) }}:
    # needed for darc (dependency flow) publishing
    - name: _PublishArgs
      value: ''
    - name: _OfficialBuildIdArgs
      value: ''
    # needed for signing
    - name: _SignType
      value: test
    - name: _SignArgs
      value: ''
    - name: _Sign
      value: false

  # Set up non-PR build from internal project
  - ${{ if and(ne(variables['runAsPublic'], 'true'), ne(variables['Build.Reason'], 'PullRequest')) }}:
    # needed for darc (dependency flow) publishing
    - name: _PublishArgs
      value: >-
            /p:DotNetPublishUsingPipelines=true
    - name: _OfficialBuildIdArgs
      value: /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
    # needed for signing
    - name: _SignType
      value: real
    - name: _SignArgs
      value: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName) /p:Sign=$(_Sign) /p:DotNetPublishUsingPipelines=true
    - name: _Sign
      value: true
=======
    - master
    - release/*
    - internal/release/*

pr:
  autoCancel: false
  branches:
    include:
    - '*'
>>>>>>> 8d8547bffdfbb7a658721bec13b9269774ab215b

stages:
- stage: build
  displayName: Build
<<<<<<< HEAD
  variables:
  - template: /eng/common/templates/variables/pool-providers.yml
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enableTelemetry: true
      enableSourceIndex: false
      runAsPublic: ${{ variables['runAsPublic'] }}
      # Publish build logs
      enablePublishBuildArtifacts: true
      # Publish test logs
      enablePublishTestResults: true
      # Publish NuGet packages using v3
      # https://github.com/dotnet/arcade/blob/main/Documentation/CorePackages/Publishing.md#basic-onboarding-scenario-for-new-repositories-to-the-current-publishing-version-v3
      enablePublishUsingPipelines: true
      enablePublishBuildAssets: true
      workspace:
        clean: all

      jobs:

      # ----------------------------------------------------------------
      # This job build and run tests on Windows
      # ----------------------------------------------------------------
      - job: Windows
        timeoutInMinutes: 180
        testResultsFormat: VSTest

        pool:
          ${{ if eq(variables['runAsPublic'], 'true') }}:
            name: $(DncEngPublicBuildPool)
            demands: ImageOverride -equals windows.vs2022preview.amd64.open
          # Non-public (i.e., official builds)
          ${{ else }}:
            name: $(DncEngInternalBuildPool)
            demands: ImageOverride -equals windows.vs2022preview.amd64

        variables:
          - _buildScript: $(Build.SourcesDirectory)/build.cmd -ci -NativeToolsOnMachine

        preSteps:
          - checkout: self
            clean: true
            persistCredentials: true
            fetchDepth: 1

        steps:
          - template: /eng/pipelines/templates/BuildAndTest.yml
            parameters:
              buildScript: $(_buildScript)
              buildConfig: $(_BuildConfig)
              repoLogPath: $(Build.Arcade.LogsPath)
              repoTestResultsPath: $(Build.Arcade.TestResultsPath)
              skipQualityGates: ${{ eq(variables['SkipQualityGates'], 'true') }}
              isWindows: true
              warnAsError: 0

      # ----------------------------------------------------------------
      # This job build and run tests on Ubuntu
      # ----------------------------------------------------------------
      - job: Ubuntu
        timeoutInMinutes: 180
        testResultsFormat: VSTest

        pool:
          ${{ if eq(variables['runAsPublic'], 'true') }}:
            name: $(DncEngPublicBuildPool)
            demands: ImageOverride -equals build.ubuntu.2004.amd64.open
          # Non-public (i.e., official builds)
          ${{ else }}:
            name: $(DncEngInternalBuildPool)
            demands: ImageOverride -equals build.ubuntu.2004.amd64

        variables:
          - _buildScript: $(Build.SourcesDirectory)/build.sh --ci

        preSteps:
          - checkout: self
            clean: true
            persistCredentials: true
            fetchDepth: 1

        steps:
          - template: /eng/pipelines/templates/BuildAndTest.yml
            parameters:
              buildScript: $(_buildScript)
              buildConfig: $(_BuildConfig)
              repoLogPath: $(Build.Arcade.LogsPath)
              repoTestResultsPath: $(Build.Arcade.TestResultsPath)
              skipQualityGates: ${{ eq(variables['SkipQualityGates'], 'true') }}
              isWindows: false
              warnAsError: 0


# ----------------------------------------------------------------
# This stage performs quality gates enforcements
# ----------------------------------------------------------------
- stage: codecoverage
  displayName: CodeCoverage
  dependsOn: 
    - build
  condition: and(succeeded('build'), ne(variables['SkipQualityGates'], 'true'))
  variables:
  - template: /eng/common/templates/variables/pool-providers.yml
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enableTelemetry: true
      runAsPublic: ${{ variables['runAsPublic'] }}
      workspace:
        clean: all

      # ----------------------------------------------------------------
      # This stage downloads the code coverage reports from the build jobs,
      # merges those and validates the combined test coverage.
      # ----------------------------------------------------------------
      jobs:
      - job: CodeCoverageReport
        timeoutInMinutes: 180

        pool:
          ${{ if eq(variables['runAsPublic'], 'true') }}:
            name: $(DncEngPublicBuildPool)
            demands: ImageOverride -equals build.ubuntu.2004.amd64.open
          # Non-public (i.e., official builds)
          ${{ else }}:
            name: $(DncEngInternalBuildPool)
            demands: ImageOverride -equals build.ubuntu.2004.amd64

        preSteps:
          - checkout: self
            clean: true
            persistCredentials: true
            fetchDepth: 1

        steps:
        - script: $(Build.SourcesDirectory)/build.sh --ci --restore
          displayName: Init toolset

        - template: /eng/pipelines/templates/VerifyCoverageReport.yml


# ----------------------------------------------------------------
# This stage only performs a build treating warnings as errors
# to detect any kind of code style violations
# ----------------------------------------------------------------
- stage: correctness
  displayName: Correctness
  dependsOn: []
  variables:
  - template: /eng/common/templates/variables/pool-providers.yml
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enableTelemetry: true
      runAsPublic: ${{ variables['runAsPublic'] }}
      workspace:
        clean: all

      jobs:
      - job: WarningsCheck
        timeoutInMinutes: 180

        pool:
          ${{ if eq(variables['runAsPublic'], 'true') }}:
            name: $(DncEngPublicBuildPool)
            demands: ImageOverride -equals build.ubuntu.2004.amd64.open
          # Non-public (i.e., official builds)
          ${{ else }}:
            name: $(DncEngInternalBuildPool)
            demands: ImageOverride -equals build.ubuntu.2004.amd64

        variables:
          - _buildScript: $(Build.SourcesDirectory)/build.sh --ci

        preSteps:
          - checkout: self
            clean: true
            persistCredentials: true
            fetchDepth: 1

        steps:
          - template: \eng\pipelines\templates\BuildAndTest.yml
            parameters:
              buildScript: $(_buildScript)
              buildConfig: $(_BuildConfig)
              repoLogPath: $(Build.Arcade.LogsPath)
              repoTestResultsPath: $(Build.Arcade.TestResultsPath)
              skipTests: true
              skipQualityGates: true
              isWindows: false


# Publish and validation steps. Only run in official builds
- ${{ if and(ne(variables['runAsPublic'], 'true'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  - template: /eng/common/templates/post-build/post-build.yml
    parameters:
      validateDependsOn:
        - build
        - codecoverage
        - correctness
=======
  jobs:
  # Code check
  - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
    - job: Code_check
      displayName: Code check
      workspace:
        clean: all
      pool:
        vmImage: vs2017-win2016
      steps:
      - ${{ if ne(variables['System.TeamProject'], 'public') }}:
        - task: PowerShell@2
          displayName: Setup Private Feeds Credentials
          inputs:
            filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.ps1
            arguments: -ConfigFile $(Build.SourcesDirectory)/NuGet.config -Password $Env:Token
          env:
            Token: $(dn-bot-dnceng-artifact-feeds-rw)
      - powershell: . ./activate.ps1; ./restore.cmd -ci $(_InternalRuntimeDownloadArgs); ./eng/scripts/CodeCheck.ps1 -ci
        displayName: Run eng/scripts/CodeCheck.ps1

  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enablePublishBuildArtifacts: true
      enablePublishTestResults: true
      enablePublishBuildAssets: true
      enablePublishUsingPipelines: ${{ variables._PublishUsingPipelines }}
      enableTelemetry: true
      helixRepo: dotnet/extensions
      jobs:
      - job: Windows
        pool:
          ${{ if eq(variables['System.TeamProject'], 'public') }}:
            name: NetCorePublic-Pool
            queue: BuildPool.Server.Amd64.VS2019.Open
          ${{ if ne(variables['System.TeamProject'], 'public') }}:
            name: NetCoreInternal-Pool
            queue: BuildPool.Server.Amd64.VS2019
        variables:
        # Only enable publishing in official builds.
        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
          # DotNet-Blob-Feed provides: dotnetfeed-storage-access-key-1
          # Publish-Build-Assets provides: MaestroAccessToken, BotAccount-dotnet-maestro-bot-PAT
          - group: DotNet-Blob-Feed
          - group: Publish-Build-Assets
          - name: _OfficialBuildArgs
            value: /p:DotNetSignType=$(_SignType)
                   /p:TeamName=$(_TeamName)
                   /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)
                   /p:DotNetPublishBlobFeedUrl=https://dotnetfeed.blob.core.windows.net/aspnet-extensions/index.json
                   /p:DotNetPublishToBlobFeed=$(_DotNetPublishToBlobFeed)
                   /p:DotNetPublishUsingPipelines=$(_PublishUsingPipelines)
                   /p:DotNetArtifactsCategory=$(_DotNetArtifactsCategory)
                   /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
        # else
        - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
          - name: _OfficialBuildArgs
            value: ''
        strategy:
          matrix:
            ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
              Debug:
                _BuildConfig: Debug
                _SignType: test
                _DotNetPublishToBlobFeed: false
                _BuildArgs:

            Release:
              _BuildConfig: Release
              # PRs or external builds are not signed.
              ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
                _SignType: test
                _DotNetPublishToBlobFeed: false
              ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
                _SignType: real
                _DotNetPublishToBlobFeed: true
                _BuildArgs: $(_OfficialBuildArgs)
        steps:
        - checkout: self
          clean: true
        - task: NuGetCommand@2
          displayName: 'Clear NuGet caches'
          condition: succeeded()
          inputs:
            command: custom
            arguments: 'locals all -clear'
        - ${{ if ne(variables['System.TeamProject'], 'public') }}:
          - task: PowerShell@2
            displayName: Setup Private Feeds Credentials
            inputs:
              filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.ps1
              arguments: -ConfigFile $(Build.SourcesDirectory)/NuGet.config -Password $Env:Token
            env:
              Token: $(dn-bot-dnceng-artifact-feeds-rw)
        - script: eng\common\cibuild.cmd -configuration $(_BuildConfig) -prepareMachine $(_BuildArgs) $(_InternalRuntimeDownloadArgs)
          displayName: Build and Publish
        - script: eng\scripts\ci-flaky-tests.cmd -configuration $(_BuildConfig)
          displayName: Run Flaky Tests
          continueOnError: true
        - powershell: eng\scripts\KillProcesses.ps1
          displayName: Kill processes
          condition: always()
        - task: PublishTestResults@2
          displayName: Publish Flaky Test Results
          inputs:
            testResultsFormat: 'xUnit'
            testResultsFiles: '*.xml'
            searchFolder: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)/Flaky'
          continueOnError: true
          condition: always()
        - task: PublishBuildArtifacts@1
          displayName: Upload TestResults
          condition: always()
          continueOnError: true
          inputs:
            pathtoPublish: artifacts/TestResults/$(_BuildConfig)/
            artifactName: $(Agent.Os)_$(Agent.JobName) TestResults
            artifactType: Container
            parallel: true
        - task: PublishBuildArtifacts@1
          displayName: Upload Test Logs
          condition: always()
          continueOnError: true
          inputs:
            pathtoPublish: artifacts/log
            artifactName: $(Agent.Os)_$(Agent.JobName) Test Logs
            artifactType: Container
            parallel: true
        - task: PublishBuildArtifacts@1
          displayName: Upload package artifacts
          condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false), eq(variables['_BuildConfig'], 'Release'))
          inputs:
            pathtoPublish: artifacts/packages/
            artifactName: artifacts
            artifactType: Container
            parallel: true

      - job: Ubuntu_16_04
        displayName: 'Ubuntu 16.04'
        pool:
          vmImage: ubuntu-16.04
        strategy:
          matrix:
            ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
              Debug:
                _BuildConfig: Debug
            Release:
              _BuildConfig: Release
        steps:
        - checkout: self
          clean: true
        - ${{ if ne(variables['System.TeamProject'], 'public') }}:
          - task: Bash@3
            displayName: Setup Private Feeds Credentials
            inputs:
              filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh
              arguments: $(Build.SourcesDirectory)/NuGet.config $Token
            env:
              Token: $(dn-bot-dnceng-artifact-feeds-rw)
        - script: eng/common/cibuild.sh
            --configuration $(_BuildConfig)
            --prepareMachine
            $(_OfficialBuildArgs)
            $(_InternalRuntimeDownloadArgs)
          displayName: Build
        - script: eng/scripts/ci-flaky-tests.sh --configuration $(_BuildConfig)
          displayName: Run Flaky Tests
          continueOnError: true
        - script: eng/scripts/KillProcesses.sh
          displayName: Kill processes
          condition: always()
        - task: PublishTestResults@2
          displayName: Publish Flaky Test Results
          inputs:
            testResultsFormat: 'xUnit'
            testResultsFiles: '*.xml'
            searchFolder: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)/Flaky'
          continueOnError: true
          condition: always()
        - task: PublishBuildArtifacts@1
          displayName: Upload TestResults
          condition: always()
          continueOnError: true
          inputs:
            pathtoPublish: artifacts/TestResults/$(_BuildConfig)/
            artifactName: $(Agent.Os)_$(Agent.JobName) TestResults
            artifactType: Container
            parallel: true
        - task: PublishBuildArtifacts@1
          displayName: Upload Test Logs
          condition: always()
          continueOnError: true
          inputs:
            pathtoPublish: artifacts/log
            artifactName: $(Agent.Os)_$(Agent.JobName) Test Logs
            artifactType: Container
            parallel: true

      - job: OSX_10_14
        displayName: 'OSX'
        pool:
          vmImage: macOS-10.14
        strategy:
          matrix:
            ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
              Debug:
                _BuildConfig: Debug
            Release:
              _BuildConfig: Release
        steps:
        - checkout: self
          clean: true
        - ${{ if ne(variables['System.TeamProject'], 'public') }}:
          - task: Bash@3
            displayName: Setup Private Feeds Credentials
            inputs:
              filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh
              arguments: $(Build.SourcesDirectory)/NuGet.config $Token
            env:
              Token: $(dn-bot-dnceng-artifact-feeds-rw)
        - script: eng/common/cibuild.sh
            --configuration $(_BuildConfig)
            --prepareMachine
            $(_InternalRuntimeDownloadArgs)
          displayName: Build
        - script: eng/scripts/ci-flaky-tests.sh --configuration $(_BuildConfig)
          displayName: Run Flaky Tests
          continueOnError: true
        - script: eng/scripts/KillProcesses.sh
          displayName: Kill processes
          condition: always()
        - task: PublishTestResults@2
          displayName: Publish Flaky Test Results
          inputs:
            testResultsFormat: 'xUnit'
            testResultsFiles: '*.xml'
            searchFolder: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)/Flaky'
          continueOnError: true
          condition: always()
        - task: PublishBuildArtifacts@1
          displayName: Upload TestResults
          condition: always()
          continueOnError: true
          inputs:
            pathtoPublish: artifacts/TestResults/$(_BuildConfig)/
            artifactName: $(Agent.Os)_$(Agent.JobName) TestResults
            artifactType: Container
            parallel: true
        - task: PublishBuildArtifacts@1
          displayName: Upload Test Logs
          condition: always()
          continueOnError: true
          inputs:
            pathtoPublish: artifacts/log
            artifactName: $(Agent.Os)_$(Agent.JobName) Test Logs
            artifactType: Container
            parallel: true
  - job: Source_Build
    displayName: 'Test: Linux Source Build'
    container: centos:7
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
      DotNetCoreSdkDir: $(Agent.ToolsDirectory)/dotnet
      DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: true
    steps:
    - ${{ if ne(variables['System.TeamProject'], 'public') }}:
      - task: Bash@3
        displayName: Setup Private Feeds Credentials
        inputs:
          filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh
          arguments: $(Build.SourcesDirectory)/NuGet.config $Token
        env:
          Token: $(dn-bot-dnceng-artifact-feeds-rw)
    - script: |
        source eng/common/native/common-library.sh
        mkdir -p $HOME/bin
        GetFile https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 $HOME/bin/jq
        chmod +x $HOME/bin/jq
        echo "##vso[task.prependpath]$HOME/bin"
      displayName: Install jq
    - script: ./eng/scripts/ci-source-build.sh --ci --configuration Release
      displayName: Run ci-source-build.sh
    - task: PublishBuildArtifacts@1
      displayName: Upload logs
      continueOnError: true
      inputs:
        pathtoPublish: artifacts/log/
        artifactName: Source_Build_Logs
        artifactType: Container
        parallel: true
    - task: PublishBuildArtifacts@1
      displayName: Upload package artifacts
      # Only capture source build artifacts in PRs for the sake of inspecting
      # changes that impact source-build. The artifacts from this build pipeline are never actually used.
      condition: and(succeeded(), in(variables['Build.Reason'], 'PullRequest'))
      inputs:
        pathtoPublish: artifacts/packages/
        artifactName: Source_Build_Packages
        artifactType: Container
        parallel: true

- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  - template: eng\common\templates\post-build\post-build.yml
    parameters:
>>>>>>> 8d8547bffdfbb7a658721bec13b9269774ab215b
      publishingInfraVersion: 3
      enableSymbolValidation: false
      enableSigningValidation: false
      enableNugetValidation: false
      enableSourceLinkValidation: false
<<<<<<< HEAD
      # these param values come from the DotNet-Winforms-SDLValidation-Params azdo variable group
      SDLValidationParameters:
        enable: false
        params: ' -SourceToolsList $(_TsaSourceToolsList)
          -TsaInstanceURL $(_TsaInstanceURL)
          -TsaProjectName $(_TsaProjectName)
          -TsaNotificationEmail $(_TsaNotificationEmail)
          -TsaCodebaseAdmin $(_TsaCodebaseAdmin)
          -TsaBugAreaPath $(_TsaBugAreaPath)
          -TsaIterationPath $(_TsaIterationPath)
          -TsaRepositoryName $(_TsaRepositoryName)
          -TsaCodebaseName $(_TsaCodebaseName)
          -TsaOnboard $(_TsaOnboard)
          -TsaPublish $(_TsaPublish)'
=======
>>>>>>> 8d8547bffdfbb7a658721bec13b9269774ab215b
